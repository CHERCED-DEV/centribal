import Head from 'next/head';
import React, { lazy } from 'react';
import { GetServerSideProps, GetServerSidePropsContext } from 'next';
import { ProductsConfig } from '../api/products/db/products.utils';
import { CmsStaticConfig } from '../api/customCms/db/utils.interface';

interface EditProductDataProps {
    product: ProductsConfig;
    CMS: CmsStaticConfig;
}

const FormContainer = lazy(()=>import('@/components/common/forms/FormContainer'))

export default function EditProductById({ CMS, product }: EditProductDataProps) {
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            {
                CMS.edit_products && product && (<FormContainer forms={CMS.edit_products} product={product} />)
            }
        </>
    )
}

const getProductById = async (id: string) => {
    try {
        const res = await fetch(`${process.env.VERCEL_URL_CORS}/api/products`);
        const data = await res.json();
        const project = data.find((unit: ProductsConfig) => unit._id === id);
        return project;
    } catch (error: any) {
        return { errorMessage: error.message };
    }
};

export const getServerSideProps: GetServerSideProps = async (context: GetServerSidePropsContext) => {
    const { query } = context;
    const { _id } = query;
    if (typeof _id !== 'string' || _id.trim() === '') {
        return {
            notFound: true
        };
    }
    const product = await getProductById(_id);
    const response = await fetch(`${process.env.VERCEL_URL_CORS}/api/customCms`);
    const CMS = await response.json();
    return {
        props: {
            product,
            CMS
        }
    };
};